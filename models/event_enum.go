// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package models

import (
	"database/sql/driver"
	"encoding/json"
	"errors"
	"fmt"
)

const (
	// EventPriceTypeFree is a EventPriceType of type free.
	EventPriceTypeFree EventPriceType = "free"
	// EventPriceTypeEntrance is a EventPriceType of type entrance.
	EventPriceTypeEntrance EventPriceType = "entrance"
	// EventPriceTypeDonation is a EventPriceType of type donation.
	EventPriceTypeDonation EventPriceType = "donation"
	// EventPriceTypePerswap is a EventPriceType of type perswap.
	EventPriceTypePerswap EventPriceType = "perswap"
)

var ErrInvalidEventPriceType = errors.New("not a valid EventPriceType")

// String implements the Stringer interface.
func (x EventPriceType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x EventPriceType) IsValid() bool {
	_, err := ParseEventPriceType(string(x))
	return err == nil
}

var _EventPriceTypeValue = map[string]EventPriceType{
	"free":     EventPriceTypeFree,
	"entrance": EventPriceTypeEntrance,
	"donation": EventPriceTypeDonation,
	"perswap":  EventPriceTypePerswap,
}

// ParseEventPriceType attempts to convert a string to a EventPriceType.
func ParseEventPriceType(name string) (EventPriceType, error) {
	if x, ok := _EventPriceTypeValue[name]; ok {
		return x, nil
	}
	return EventPriceType(""), fmt.Errorf("%s is %w", name, ErrInvalidEventPriceType)
}

// MarshalText implements the text marshaller method.
func (x EventPriceType) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *EventPriceType) UnmarshalText(text []byte) error {
	tmp, err := ParseEventPriceType(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var errEventPriceTypeNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *EventPriceType) Scan(value interface{}) (err error) {
	if value == nil {
		*x = EventPriceType("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case string:
		*x, err = ParseEventPriceType(v)
	case []byte:
		*x, err = ParseEventPriceType(string(v))
	case EventPriceType:
		*x = v
	case *EventPriceType:
		if v == nil {
			return errEventPriceTypeNilPtr
		}
		*x = *v
	case *string:
		if v == nil {
			return errEventPriceTypeNilPtr
		}
		*x, err = ParseEventPriceType(*v)
	default:
		return errors.New("invalid type for EventPriceType")
	}

	return
}

// Value implements the driver Valuer interface.
func (x EventPriceType) Value() (driver.Value, error) {
	return x.String(), nil
}

type NullEventPriceType struct {
	EventPriceType EventPriceType
	Valid          bool
	Set            bool
}

func NewNullEventPriceType(val interface{}) (x NullEventPriceType) {
	err := x.Scan(val) // yes, we ignore this error, it will just be an invalid value.
	_ = err            // make any errcheck linters happy
	return
}

// Scan implements the Scanner interface.
func (x *NullEventPriceType) Scan(value interface{}) (err error) {
	if value == nil {
		x.EventPriceType, x.Valid = EventPriceType(""), false
		return
	}

	err = x.EventPriceType.Scan(value)
	x.Valid = (err == nil)
	return
}

// Value implements the driver Valuer interface.
func (x NullEventPriceType) Value() (driver.Value, error) {
	if !x.Valid {
		return nil, nil
	}
	return x.EventPriceType.String(), nil
}

// MarshalJSON correctly serializes a NullEventPriceType to JSON.
func (n NullEventPriceType) MarshalJSON() ([]byte, error) {
	const nullStr = "null"
	if n.Valid {
		return json.Marshal(n.EventPriceType)
	}
	return []byte(nullStr), nil
}

// UnmarshalJSON correctly deserializes a NullEventPriceType from JSON.
func (n *NullEventPriceType) UnmarshalJSON(b []byte) error {
	n.Set = true
	var x interface{}
	err := json.Unmarshal(b, &x)
	if err != nil {
		return err
	}
	err = n.Scan(x)
	return err
}
